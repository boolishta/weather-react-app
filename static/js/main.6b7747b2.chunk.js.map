{"version":3,"sources":["components/Cities.js","components/Header.js","components/Search.js","components/WeatherDisplay.js","components/WeatherDisplayContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cities","PLACES","activePlace","removeCity","updateActivePlace","Nav","variant","className","activeKey","onSelect","index","map","place","NavItem","key","NavLink","eventKey","onDoubleClick","name","Header","Navbar","Brand","Search","handleSubmit","value","handleChange","Form","onSubmit","Row","Group","controlId","Control","placeholder","onChange","Button","type","WeatherDisplay","weather","weatherData","iconUrl","main","src","alt","description","temp","feels_like","temp_max","temp_min","humidity","wind","speed","WeatherDisplayContainer","state","error","show","URL","this","props","Axios","get","then","res","setState","data","catch","Alert","Heading","response","cod","message","Spinner","animation","icon","Component","App","bind","newPlaces","filter","p","event","target","length","preventDefault","Container","Col","md","sd","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6b7747b2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Nav, NavItem, NavLink } from 'react-bootstrap'\r\n\r\nconst Cities = ({ PLACES, activePlace, removeCity, updateActivePlace }) => {\r\n  return (\r\n    <Nav  variant=\"pills\"\r\n          className=\"flex-column\"\r\n          activeKey={activePlace}\r\n          onSelect={index => updateActivePlace(index)}>\r\n      {PLACES.map((place, index) => (\r\n        <NavItem key={index}>\r\n          <NavLink eventKey={index}\r\n            onDoubleClick={() => removeCity(place.name)}>{place.name}</NavLink>\r\n        </NavItem>)\r\n        )\r\n      }\r\n    </Nav>\r\n  )  \r\n}\r\n\r\nexport default Cities","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar className=\"navbar\" >\r\n      <Navbar.Brand>React Simple Weather App</Navbar.Brand>\r\n    </Navbar>\r\n  )  \r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nconst Search = ({handleSubmit, value, handleChange }) => {\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Row>\r\n        <Form.Group  controlId=\"formGridCity\" >\r\n          <Form.Control value={value} placeholder=\"Search...\" onChange={handleChange} />\r\n        </Form.Group>\r\n      </Form.Row>\r\n      <Button variant=\"outline-success\" type=\"submit\"> Добавить</Button>\r\n    </Form>\r\n  )  \r\n}\r\n\r\nexport default Search","import React from 'react';\r\n\r\nconst WeatherDisplay = ({ weather, weatherData, iconUrl }) => {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {weather.main} in {weatherData.name}\r\n        <img src={iconUrl} alt={weatherData.description} />\r\n      </h1>\r\n      <p>Температура: {weatherData.main.temp}°</p>\r\n      <p>Ощущается как: {weatherData.main.feels_like}°</p>\r\n      <p>Максимальная температура: {weatherData.main.temp_max}°</p>\r\n      <p>Минимальная температура: {weatherData.main.temp_min}°</p>\r\n      <p>Влажность: {weatherData.main.humidity} %</p>\r\n      <p>Скорость ветра: {weatherData.wind.speed} м/сек</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDisplay","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nimport { Alert, Spinner } from 'react-bootstrap';\r\nimport WeatherDisplay from './WeatherDisplay';\r\n\r\n\r\nclass WeatherDisplayContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weatherData: null,\r\n      error: null,\r\n      show: false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const name = this.props.name;\r\n    const URL = \"http://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      name + \"&units=metric&appid=b1b35bba8b434a28a0be2a3e1071ae5b\";\r\n    Axios.get(URL)\r\n      .then(res => this.setState({ weatherData: res.data }))\r\n      .catch(error => this.setState({ error }))\r\n  }\r\n  render() {\r\n    const { weatherData, error } = this.state;\r\n    if (!weatherData && error) {\r\n      return (\r\n        <Alert variant=\"danger\" >\r\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\r\n          <p>{error.response.data.cod} {error.response.data.message}</p>\r\n        </Alert>\r\n      );\r\n    } else if (!weatherData) {\r\n      return <Spinner animation=\"grow\" />\r\n    }\r\n    const weather = weatherData.weather[0];\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n    return <WeatherDisplay weather={weather} weatherData={weatherData} iconUrl={iconUrl}/>\r\n  }\r\n}\r\n\r\nexport default WeatherDisplayContainer","import React, { Component } from 'react';\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport './css/bootstrap.min.css';\nimport './App.css';\nimport Cities from './components/Cities';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport WeatherDisplayContainer from './components/WeatherDisplayContainer';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      PLACES: [\n        { name: \"Санкт-Петербург\" },\n        { name: \"Улан-Удэ\" },\n        { name: \"Москва\" }\n      ],\n      activePlace: 0,\n      value: \"\",\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeCity = this.removeCity.bind(this);\n    this.updateActivePlace = this.updateActivePlace.bind(this);\n  }\n  updateActivePlace(index) {\n    this.setState({ activePlace: index })\n  }\n  removeCity(name) {\n    const { PLACES } = this.state;\n    let newPlaces = PLACES.filter( p => p.name !== name)\n    this.setState({ PLACES: newPlaces, activePlace: 0 })\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n  handleSubmit(event) {\n    const { value, PLACES } = this.state;\n    this.setState({\n      PLACES: [\n        ...PLACES,\n        { name: value }\n      ],\n      value: \"\",\n      activePlace: PLACES.length\n    })\n    event.preventDefault();\n  }\n\n  render() {\n    const { activePlace, PLACES, value } = this.state;\n    if ( !PLACES.length ) return (\n      <Container>\n        <Header />\n        <Row>\n          <Col md={4} sd={4}>\n            <Search value={value} handleSubmit={this.handleSubmit} handleChange={this.handleChange}/>\n          </Col>\n          <Col md={8} sd={8}><h1>Нет города для показа погоды</h1></Col>\n        </Row>\n      </Container>)\n    return (\n      <Container>\n        <Header />\n        <Row>\n          <Col md={4} sd={4}>\n            <Search value={value} handleSubmit={this.handleSubmit} handleChange={this.handleChange}/>           \n            <Cities PLACES={PLACES} activePlace={activePlace} removeCity={this.removeCity} updateActivePlace={this.updateActivePlace}/>\n          </Col>\n          <Col md={8} sd={8}>\n            <WeatherDisplayContainer key={activePlace} name={PLACES[activePlace].name} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif(module.hot) {\n  module.hot.accept(); //при изменении компоненты страница браузера не обновляется\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}